---
source: supergraph/src/command/compose.rs
expression: result
---
{
  "Ok": {
    "supergraphSdl": "schema\n  @link(url: \"https://specs.apollo.dev/link/v1.0\")\n  @link(url: \"https://specs.apollo.dev/join/v0.4\", for: EXECUTION)\n  @join__directive(graphs: [TEST], name: \"link\", args: {url: \"https://specs.apollo.dev/connect/v0.1\", import: [\"@connect\", \"@source\"]})\n  @join__directive(graphs: [TEST], name: \"source\", args: {name: \"json\", http: {baseURL: \"http://a.co/\"}})\n{\n  query: Query\n}\n\ndirective @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION\n\ndirective @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE\n\ndirective @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean, overrideLabel: String) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @join__graph(name: String!, url: String!) on ENUM_VALUE\n\ndirective @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE\n\ndirective @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR\n\ndirective @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION\n\ndirective @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA\n\nscalar join__DirectiveArguments\n\nscalar join__FieldSet\n\nenum join__Graph {\n  TEST @join__graph(name: \"test\", url: \"http://localhost:4000/graphql\")\n}\n\nscalar link__Import\n\nenum link__Purpose {\n  \"\"\"\n  `SECURITY` features provide metadata necessary to securely resolve fields.\n  \"\"\"\n  SECURITY\n\n  \"\"\"\n  `EXECUTION` features provide metadata necessary for operation execution.\n  \"\"\"\n  EXECUTION\n}\n\ntype Query\n  @join__type(graph: TEST)\n{\n  users: [User] @join__directive(graphs: [TEST], name: \"connect\", args: {source: \"json\", http: {GET: \"/users\"}, selection: \"id name\"})\n}\n\ntype User\n  @join__type(graph: TEST)\n{\n  id: ID!\n  name: String\n}",
    "hints": []
  }
}
