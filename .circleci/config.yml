version: 2.1

# Our CircleCI dependencies
orbs:
  rust: circleci/rust@1.5.0

# The main workflows executed for federation-rs
workflows:
  lint:
    jobs:
      - xtask:
          name: Lint
          matrix:
            parameters:
              platform: [ubuntu]
              rust_channel: [stable]
              command: [lint]
  test:
    jobs:
      - xtask:
          name: Run cargo tests (<< matrix.rust_channel >> rust on << matrix.platform >>)
          matrix:
            parameters:
              platform: [ubuntu, macos, windows]
              rust_channel: [stable]
              command: [test]

jobs:
  xtask:
    parameters:
      rust_channel:
        type: enum
        enum: ["stable", "nightly"]
        default: stable
      platform:
        type: executor
      command:
        type: enum
        enum: [lint, test, dist]
      options:
        type: string
        default: "--verbose"
    executor: << parameters.platform >>
    steps:
      - checkout
      - install_system_deps:
          platform: << parameters.platform >>
          rust_channel: << parameters.rust_channel >>
      - exec_xtask:
          platform: << parameters.platform >>
          command: << parameters.command >>
          options: << parameters.options >>

# The machines we use to run our workflows on
executors:
  macos: &macos_executor
    macos:
      xcode: "11.4"
    resource_class: medium

  windows: &windows_executor
    machine:
      image: 'windows-server-2019-vs2019:stable'
    resource_class: windows.xlarge
    shell: powershell.exe -ExecutionPolicy Bypass

  ubuntu: &ubuntu_executor
    docker:
      - image: cimg/base:stable
    resource_class: large

# reusable command snippets can be referred to in any `steps` object
commands:
  install_system_deps:
    parameters:
      platform:
        type: executor
      rust_channel:
        type: enum
        enum: ["stable", "nightly"]
    steps:
      - when:
          condition:
            equal: [ *ubuntu_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Update apt repositories
                command: sudo apt-get update

      - when:
          condition:
            equal: [ *macos_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Skip homebrew update
                command: echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $BASH_ENV
            - run:
                name: Install curl
                command: |
                  brew install curl
                  echo 'export PATH="/usr/local/opt/curl/bin:$PATH"' >> $BASH_ENV

      - install_volta:
          platform: << parameters.platform >>

      - install_rust_toolchain:
          rust_channel: << parameters.rust_channel >>
          platform: << parameters.platform >>

  install_volta:
    parameters:
      platform:
        type: executor
    steps:
      - unless:
          condition:
            equal: [ *windows_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install volta
                command: |
                  curl https://get.volta.sh | bash -s -- --skip-setup
                  echo 'export VOLTA_HOME=$HOME/.volta' >> $BASH_ENV
                  echo 'export PATH=$VOLTA_HOME/bin:$PATH' >> $BASH_ENV
      - when:
          condition:
            equal: [ *windows_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install volta
                command: |
                  $installer_dir = "$Env:TEMP".Path
                  $latest_version = ((Invoke-WebRequest -URI https://volta.sh/latest-version).Content -split '\n')[0]
                  $download_url = "https://github.com/volta-cli/volta/releases/download/v$latest_version/volta-$latest_version-windows-x86_64.msi"
                  echo "Downloading volta"
                  $msi_path = "$installer_dir\volta-init.msi"
                  (New-Object System.Net.WebClient).DownloadFile("$download_url", "$msi_path")
                  echo "Installing volta"
                  msiexec.exe /i "$msi_path" /qn
                  exit $LASTEXITCODE

      - run:
          name: Install default versions of npm and node
          command: |
            volta install node@16
            volta install npm@7


  install_rust_toolchain:
    parameters:
      rust_channel:
        type: enum
        enum: ["stable", "nightly"]
      platform:
        type: executor
    steps:
      - unless:
          condition:
            equal: [ *windows_executor, << parameters.platform >> ]
          steps:
            - rust/install:
                version: << parameters.rust_channel >>
      - when:
          condition:
            equal: [ *windows_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install rustup
                environment:
                  # Override auto-detection of RAM for rustc install.
                  # https://github.com/rust-lang/rustup/issues/2229#issuecomment-585855925
                  RUSTUP_UNPACK_RAM: "21474836480"
                command: |
                  $installer_dir = "$Env:TEMP"
                  echo "Downloading rustup"
                  (New-Object System.Net.WebClient).DownloadFile("https://win.rustup.rs/x86_64", "$installer_dir\rustup-init.exe")
                  echo "Installing rustup"
                  & $installer_dir\rustup-init.exe --profile minimal -y
                  exit $LASTEXITCODE
            - run:
                name: Configure cargo for Windows
                command: |
                  Add-Content -path "${Env:USERPROFILE}\.cargo\config.toml" @"
                  [net]
                  git-fetch-with-cli = true
                  "@

  exec_xtask:
    parameters:
      command:
        type: enum
        enum: [lint, test, dist]
      options:
        type: string
        default: --verbose
      platform:
        type: executor
    steps:
      - restore_cache:
          keys:
            - rust-target-v1-<< parameters.platform >>-{{ checksum "Cargo.lock" }}

      - run:
          command: cargo xtask << parameters.command >> << parameters.options >>

      - save_cache:
          key: rust-target-v1-<< parameters.platform >>-{{ checksum "Cargo.lock" }}
          paths:
            - target/

