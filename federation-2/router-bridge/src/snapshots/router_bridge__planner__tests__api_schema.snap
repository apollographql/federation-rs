---
source: router-bridge/src/planner.rs
expression: api_schema.schema
---
directive @transform(from: String!) on FIELD

union AccountType = PasswordAccount | SMSAccount

type Amazon {
  referrer: String
}

union Body = Image | Text

type Book implements Product {
  isbn: String!
  title: String
  year: Int
  similarBooks: [Book]!
  metadata: [MetadataOrError]
  inStock: Boolean
  isCheckedOut: Boolean
  upc: String!
  sku: String!
  name(delimeter: String = " "): String
  price: String
  details: ProductDetailsBook
  reviews: [Review]
  relatedReviews: [Review!]!
}

union Brand = Ikea | Amazon

type Car implements Vehicle {
  id: String!
  description: String
  price: String
  retailPrice: String
}

type Error {
  code: Int
  message: String
}

type Furniture implements Product {
  upc: String!
  sku: String!
  name: String
  price: String
  brand: Brand
  metadata: [MetadataOrError]
  details: ProductDetailsFurniture
  inStock: Boolean
  isHeavy: Boolean
  reviews: [Review]
}

type Ikea {
  asile: Int
}

type Image implements NamedObject {
  name: String!
  attributes: ImageAttributes!
}

type ImageAttributes {
  url: String!
}

type KeyValue {
  key: String!
  value: String!
}

type Library {
  id: ID!
  name: String
  userAccount(id: ID! = 1): User
}

union MetadataOrError = KeyValue | Error

type Mutation {
  login(username: String!, password: String!): User
  reviewProduct(upc: String!, body: String!): Product
  updateReview(review: UpdateReviewInput!): Review
  deleteReview(id: ID!): Boolean
}

type Name {
  first: String
  last: String
}

interface NamedObject {
  name: String!
}

type PasswordAccount {
  email: String!
}

interface Product {
  upc: String!
  sku: String!
  name: String
  price: String
  details: ProductDetails
  inStock: Boolean
  reviews: [Review]
}

interface ProductDetails {
  country: String
}

type ProductDetailsBook implements ProductDetails {
  country: String
  pages: Int
}

type ProductDetailsFurniture implements ProductDetails {
  country: String
  color: String
}

type Query {
  user(id: ID!): User
  me: User
  book(isbn: String!): Book
  books: [Book]
  library(id: ID!): Library
  body: Body!
  product(upc: String!): Product
  vehicle(id: String!): Vehicle
  topProducts(first: Int = 5): [Product]
  topCars(first: Int = 5): [Car]
  topReviews(first: Int = 5): [Review]
}

type Review {
  id: ID!
  body(format: Boolean = false): String
  author: User
  product: Product
  metadata: [MetadataOrError]
}

type SMSAccount {
  number: String
}

type Text implements NamedObject {
  name: String!
  attributes: TextAttributes!
}

type TextAttributes {
  bold: Boolean
  text: String
}

union Thing = Car | Ikea

input UpdateReviewInput {
  id: ID!
  body: String
}

type User {
  id: ID!
  name: Name
  username: String
  birthDate(locale: String): String
  account: AccountType
  metadata: [UserMetadata]
  goodDescription: Boolean
  vehicle: Vehicle
  thing: Thing
  reviews: [Review]
  numberOfReviews: Int!
  goodAddress: Boolean
}

type UserMetadata {
  name: String
  address: String
  description: String
}

type Van implements Vehicle {
  id: String!
  description: String
  price: String
  retailPrice: String
}

interface Vehicle {
  id: String!
  description: String
  price: String
  retailPrice: String
}
