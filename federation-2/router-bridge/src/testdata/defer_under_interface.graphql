schema
        @link(url: "https://specs.apollo.dev/link/v1.0")
        @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
        @link(url: "https://specs.apollo.dev/tag/v0.2")
        @link(url: "https://specs.apollo.dev/inaccessible/v0.2")
        {
            query: Query
        }
    
      directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
      directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
      directive @join__graph(name: String!, url: String!) on ENUM_VALUE
      directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE
      directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR
      directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA
      directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
    
      scalar join__FieldSet
      enum join__Graph {
        USER @join__graph(name: "user", url: "http://localhost:4000/graphql")
      }
      scalar link__Import
      enum link__Purpose {
        SECURITY
        EXECUTION
      }
      type Query
      @join__type(graph: USER)
    {
      me: Identity @join__field(graph: USER)
    }
    interface Identity
      @join__type(graph: USER)
    {
      id: ID!
      name: String!
    }
  
      type User implements Identity
        @join__implements(graph: USER, interface: "Identity")
        @join__type(graph: USER, key: "id")
      {
        fullName: String! @join__field(graph: USER)
        id: ID!
        memberships: [UserMembership!]!  @join__field(graph: USER)
        name: String! @join__field(graph: USER)
      }
      type UserMembership
        @join__type(graph: USER)
        @tag(name: "platform-api")
      {
        """The organization that the user belongs to."""
        account: Account!
        """The user's permission level within the organization."""
        permission: UserPermission!
      }
    enum UserPermission
    @join__type(graph: USER)
    {
        USER
        ADMIN
    }
    type Account
    @join__type(graph: USER, key: "id")
    {
        id: ID! @join__field(graph: USER)
        name: String!  @join__field(graph: USER)
    }